doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Intro to Docker

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='bower_components/animate.css/animate.min.css')

    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section.title
        h1 Intro to Docker

      section
        h2 Hi, I'm Steve
        ul
          li
            | Web Engineer @&nbsp;
            a(href='https://www.insynchq.com') Insync
          li Python, Javascript and Go
          li: a(href='https://twitter.com/themarksteve') twitter.com/themarksteve
          li: a(href='https://github.com/marksteve') github.com/marksteve

      section
        p
          img(src='images/docker.png', width=480)

      section
        p
          img(src='images/docker.png', width=120)
        blockquote.
          Docker is an open-source engine that automates the deployment of any
          application as a lightweight, portable, self-sufficient container that
          will run virtually anywhere.
        p
          | &mdash;&nbsp;
          a(href='https://www.docker.io') docker.io

      section.versus
        .title.three.cols.bullet
          .col
            h2 System Virtual Machines
            ul
              li Emulates hardware and OS
              li Eats lots of storage space
              li Heavy on resources
          .col
            img(src='images/versus.png', width=80)
          .col
            h2 Docker Containers
            ul
              li Isolates your app but shares the same resource and OS with the host
              li Lightweight
              li Portable
              li Social!

      section.components
        h2 Docker Components
        h3.bullet Daemon, Client and the Index
        h4.bullet Daemon (<code>docker -d</code>)
        p.bullet Receives and processes commands<br>to manage lifecycle of containers
        h4.bullet Client (<code>docker &lt;command&gt;</code>)
        p.bullet Primary user interface to Docker sending<br>commands through sockets or the RESTful API
        h4.bullet Index (<code>http://index.docker.io/</code>)
        p.bullet Global archive and directory for<br>user supplied Docker images

      section.docker-index
        p
          img(src='images/docker-index.png', width=600)
        p Docker Index

      section.elements
        h2 Docker Elements
        h3.bullet Containers, Images and the Dockerfile
        h4.bullet Containers (<code>docker ps</code>)
        p.bullet Isolated environments that runs your apps
        h4.bullet Images (<code>docker images</code>)
        p.bullet Templates containers are built from
        h4.bullet Dockerfile
        p.bullet Blueprint for building images

      section
        h2 Hello World
        pre
          code.language-bash.
            $ docker pull ubuntu
            $ docker run ubuntu echo "Hello, world"
            Hello, world

      section
        h2 Hello World
        pre
          code.language-bash.
            $ docker ps -a
            CONTAINER ID  IMAGE         COMMAND            ...
            aa3264ba7371  ubuntu:12.04  echo Hello, world  ...

      section
        h2 Building Images
        pre
          code.language-bash.
            $ cat &gt;Dockerfile &lt;&lt;EOF
            FROM marksteve/python
            RUN pip install requests
            EOF
            $ docker build --rm -t python-requests .
            ...
            $ docker run --rm -t -i python-requests /bin/bash -il
            # Inside docker container
            $ python
            Python 2.7.6 (default, Mar 22 2014, 22:59:56)
            [GCC 4.8.2] on linux2
            Type "help", "copyright", "credits" or "license" for more
            information.
            &gt;&gt;&gt; import requests

      section
        h2 Build Images
        pre
          code.language-bash.
            $ docker images
            REPOSITORY       TAG     IMAGE ID      ...
            python-requests  latest  1a1709cd171b  ...

      section
        h2 Exposing Ports
        pre
          code.language-python.
            # app.py

            from flask import Flask

            app = Flask(__name__)

            @app.route("/")
            def index():
              return "Hello, world"

            if __name__ == "__main__":
              app.run(host="0.0.0.0")

      section
        h2 Exposing Ports
        pre.bullet
          code.language-bash.
            $ cat &gt;Dockerfile &lt;&lt;EOF
            FROM marksteve/python
            RUN pip install Flask
            ADD app.py /src/app.py
            CMD python /src/app.py
            EOF
            $ docker build --rm -t flask-hello-world .
        pre.bullet
          code.language-bash.
            $ docker run --rm -t -i -p 5000:5000 flask-hello-world

      section
        h2 Volumes
        pre
          code.language-python.
            # update-settings.py

            import json
            import sys

            SETTINGS_FILE = "/var/app/settings.json"

            if __name__ == "__main__":
              try:
                with open(SETTINGS_FILE) as f:
                  settings = json.load(f)
              except:
                settings = dict()
              settings[sys.argv[1]] = sys.argv[2]
              with open(SETTINGS_FILE, "w") as f:
                f.write(json.dumps(settings))

      section
        h2 Volumes
        pre
          code.language-bash.
            $ cat &gt;Dockerfile &lt;&lt;EOF
            FROM marksteve/python
            ADD update-settings.py /src/update-settings.py
            WORKDIR /src
            ENTRYPOINT ["python", "update-settings.py"]
            EOF

            $ docker build --rm -t update-settings .

      section
        h2 Volumes
        pre
          code.language-bash.
            $ docker run -v /var/app --name app-settings \
            ubuntu true

      section
        h2 Volumes
        pre
          code.language-bash.
            $ docker run --rm --volumes-from app-settings \
            update-settings cheats on

            $ docker run --rm --volumes-from app-settings \
            update-settings gold 16000

            $ docker run --rm --volumes-from app-settings ubuntu \
            cat /var/app/settings.json

      section
        h2 Host Mounts
        pre
          code.language-bash.
            $ docker run --rm -v `pwd`:/host ubuntu ls /host

      section
        h2 Linking Containers
        pre
          code.language-python.
            # app.py

            from flask import Flask, jsonify, request
            from flask_redisconfig import RedisConfig

            app = Flask(__name__)
            config = RedisConfig("app:config")
            config.init_app(app)

      section
        h2 Linking Containers
        pre
          code.language-python.
            # app.py

            @app.route("/config/&lt;name&gt;")
            def get_config(name):
              res = dict()
              res[name] = app.config.get(name)
              return jsonify(**res)

            if __name__ == "__main__":
              app.run(host="0.0.0.0")

      section
        h2 Linking Containers
        pre
          code.language-bash.
            $ cat &gt;Dockerfile &lt;&lt;EOF
            FROM marksteve/python
            RUN pip install Flask Flask-RedisConfig
            ADD app.py /src/app.py
            CMD python /src/app.py
            EOF
            $ docker build --rm -t flask-with-redisconfig .

      section
        h2 Linking Containers
        pre
          code.language-bash.
            $ docker run -d --name app-redis marksteve/redis

      section
        h2 Linking Containers
        pre
          code.language-bash.
            $ docker run --rm -t -i --link app-redis:redis \
            flask-with-redisconfig env
            ...
            REDIS_PORT=tcp://172.17.0.9:6379
            REDIS_PORT_6379_TCP=tcp://172.17.0.9:6379
            REDIS_PORT_6379_TCP_ADDR=172.17.0.9
            REDIS_PORT_6379_TCP_PORT=6379
            REDIS_PORT_6379_TCP_PROTO=tcp
            REDIS_NAME=/cocky_nobel/redis
            ...

      section
        h2 Linking Containers
        pre
          code.language-python.
            import os
            host = os.environ.get("REDIS_PORT_6379_TCP_ADDR")
            config = RedisConfig("app.config", host=host)

      section
        h2 Linking Containers
        pre
          code.language-bash.
            $ docker build --rm -t flask-with-redisconfig .
            $ docker run --rm -t -i --link app-redis:redis \
            flask-with-redisconfig /bin/bash -il
            # Inside docker container
            $ cd src
            $ python
            &gt;&gt;&gt; from app import config
            &gt;&gt;&gt; config.cli()
            Flask-RedisConfig
            &gt; set_bool DEBUG 1
            &gt; set SECRET_KEY theresnoplacelikecowlevel

      section
        h2 Linking Containers
        pre
          code.language-bash.
            $ docker run --rm -t -i -p 5000:5000 \
            --link app-redis:redis flask-with-redisconfig

      section.tools
        h2 Tools
        .three.cols.bullet
          .col
            h3 Orchestration
            ul
              li: a(href='http://orchardup.github.io/fig/') Fig
              li: a(href='https://github.com/toscanini/maestro') Maestro
              li: a(href='https://github.com/mailgun/shipper') Shipper
          .col
            h3 Web Interface
            ul
              li: a(href='https://github.com/shipyard/shipyard') Shipyard
              li: a(href='https://github.com/crosbymichael/dockerui') DockerUI
          .col
            h3 Service
            ul
              li: a(href='https://github.com/progrium/dokku') Dokku (PaaS)
              li: a(href='https://github.com/deis/deis') Deis (PaaS)
              li: a(href='https://github.com/drone/drone') Drone (CI)

      section
        h2.bullet I personally<br>use Docker to&hellip;
        ul
          li Create dev environments
          li Try out libraries with complicated build instructions
          li Deploy experiments

      section
        h2 Questions?
        h3 Thank you for listening
        p.ps
          small.
            I don't own any of the images used in this<br>
            presentation except for the title slide background


    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='bower_components/prism/components/prism-bash.js')
    script(src='bower_components/prism/components/prism-python.js')
    script(src='scripts/main.js')
    // endbuild
